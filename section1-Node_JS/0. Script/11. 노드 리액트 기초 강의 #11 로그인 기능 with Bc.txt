11. 노드 리액트 기초 강의 #11 로그인 기능 with Bcrypt (1)

login route 만들기

- 데이터 베이스에서 요청한 E-mail 찾기.
- 요청된 이메일이 데이터 베이스에 있다면, 비밀번호가 맞는 비밀번호인지 확인.
- 비밀번호까지 맞을경우, 토큰을 생성하기.

---
(User.js)

const mongoose = require('mongoose');

// 비밀번호 암호화!
const bcrypt = require('bcrypt');
const saltRounds = 10


const userSchema = mongoose.Schema({
    name: {
        type : String,
        maxlength: 50
    },
    email: {
        type : String,
        trim: true, // space를 없애주는 역할을 함.
        unique:1
    },
    password: {
        type : String,
        minlength : 5
    },
    lastname: {
        type : String,
        maxlength : 50
    },
    role: {
        type : Number,
        default: 0  // 임의로 롤을 지정하지 않을경우 0값 입력
    },
    image: String,
    token :{        // 유효성 검사를 할 수 있음.
        type : String
    },
    tokenExp: {
        type : Number
    }
})

userSchema.pre('save', function( next ){
    var user = this;

    // password가 변경 될때만 아래의 구문 실행!
    if(user.isModified('password')) {
        // 비밀번호를 암호화 시킨다.
        bcrypt.genSalt(saltRounds, function(err, salt) {
            if(err) return next(err)

            // 첫번째 아규먼트 값은 PlainPassword
            bcrypt.hash(user.password, salt, function(err, hash) {
                if(err) return next(err)

                // 암호 비밀번호를 만드는데 성공했다면?!
                user.password = hash
                next()
            })
        })
    } else {        // 비밀번호를 변경하는것이 아닌경우
        next()
    }
})

userSchema.methods.comparePassword = function(plainPassword, cb) {
    
    // plainPassword 1234567    암호화된 비밀번호
    bcrypt.compare(plainPassword, this.password, function(err, isMatch) {
        if(err) return cb(err),
        cb(null, isMatch)
    })
}

const User = mongoose.model('User', userSchema)

module.exports = { User }
---
(index.js)
const express = require('express')	// express 모듈을 가져온다!
const app = express()			    // 새로운 익스프레스 app을 만든다!
const port = 5000				    // port는 아무렇게 4000번해도 되고, 5000번으로 해도된다!
const bodyParser = require('body-parser');

const config = require("./config/key");

const { User } = require("./models/User");  // User정보를 가져온다!

// 바디파서가 클라이언트에서 오는 정보를 서버에서 분석해서 가져오게 해준다.
// application/x-www-form-urlencoded    이 데이터를 분석해서 가지고 올 수 있게 해준다.
app.use(bodyParser.urlencoded({extended: true}));

// application/json 을 분석해서 가지고 올 수 있게 해준것이다.
app.use(bodyParser.json());

// Mongoose 설정
const mongoose = require('mongoose')
// mongoose 6버전 미만
// mongoose.connect('mongodb+srv://iokl1004:doslzhf123@boilerplate.sepbw.mongodb.net/?retryWrites=true&w=majority&appName=boilerplate', {
//     useNewUrlParser : true, useUnifiedTopology : true, useCreateIndex : true, useFindAndModify : false
// }).then(() => console.log('MongoDB Connected..'))

// mongoose 6버전 이상 (mongoose 6버전 이상에선 더이상 useNewUrlParser, useUnifiedTopology, useFindAndModify, useCreateIndex 요 친구들을 지원하지 않음)
mongoose.connect(config.mongoURI)
.then(() => console.log('MongoDB Connected..'))
.catch(err => console.log(err))

app.get('/', (req, res) => res.send('Hello World!~~ 안녕하세요~'))	// root 디렉토리에 오면 Hello World를 출력 되게끔 해준다!

app.post('/register', async (req, res) => {
    // 회원가입 할 때 필요한 정보들을 client에서 가져오면
    // 그것들을 데이터 베이스에 넣어준다.

    // User 인스턴스 생성
    const user = new User(req.body)

    const result = await user.save().then(()=> {
        res.status(200).json({
            success: true
        })
    }).catch((err) => {
        res.json({ success : false, err})
    })
})

app.post('/login', (req, res) => {

    // 요청된 이메일을 데이터베이스에서 있는지 찾는다.
    User.findOne({ email : req.body.email }, (err, user) => {
        if(!user) {
            return res.json({
                loginSuccess : false,
                message : "제공된 이메일에 해당하는 유저가 없습니다."
            })
        }
        // 요청된 이메일이 데이터 베이스에 있다면, 비밀번호가 맞는 비밀번호인지 확인.
        user.comparePassword(req.body.password, (err, isMatch) =>{
            if(!isMatch)
                return res.json({ loginSuccess : false, message:"비밀번호가 틀렸습니다." })
            
            // 비밀번호 까지 맞을경우 토큰을 생성하기.
            user.generateToken((err, user) => {
                
            })
        })
    })
    

    // 비밀번호까지 맞을경우, 토근을 생성하기.
})

app.listen(port, () => console.log(`Example app listening on port ${port}!`))	// 5000번 포트에서 해당 앱을 실행하게끔 해주는 것이다!