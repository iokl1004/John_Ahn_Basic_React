9. 노드 리액트 기초 강의 #9 비밀 설정 정보 관리

예) index.js파일에서의 mongoose 소스

config폴더 생성 후, dev.js, key.js, prod.js 파일 추가 및 index.js 파일 수정
---
(config/key.js)
// 환경변수
// Local 환경인경우 development
// Deploy(배포) 한 후에는 production 이라고 나옴
if(process.env.NODE_ENV === 'production') {
    module.exports = require('./prod');
} else {
    module.exports = require('./dev');
}
---
(config/dev.js)
module.exports = {
    mongoURI:'mongodb+srv://iokl1004:doslzhf123@boilerplate.sepbw.mongodb.net/?retryWrites=true&w=majority&appName=boilerplate'
}
---
(config/prod.js)
module.exports = {
    mongoURI : process.env.MONGO_URI
}
---
(index.js)
const express = require('express')	// express 모듈을 가져온다!
const app = express()			    // 새로운 익스프레스 app을 만든다!
const port = 5000				    // port는 아무렇게 4000번해도 되고, 5000번으로 해도된다!
const bodyParser = require('body-parser');

const config = require("./config/key");

const { User } = require("./models/User");  // User정보를 가져온다!

// 바디파서가 클라이언트에서 오는 정보를 서버에서 분석해서 가져오게 해준다.
// application/x-www-form-urlencoded    이 데이터를 분석해서 가지고 올 수 있게 해준다.
app.use(bodyParser.urlencoded({extended: true}));

// application/json 을 분석해서 가지고 올 수 있게 해준것이다.
app.use(bodyParser.json());

// Mongoose 설정
const mongoose = require('mongoose')
// mongoose 6버전 미만
// mongoose.connect('mongodb+srv://iokl1004:doslzhf123@boilerplate.sepbw.mongodb.net/?retryWrites=true&w=majority&appName=boilerplate', {
//     useNewUrlParser : true, useUnifiedTopology : true, useCreateIndex : true, useFindAndModify : false
// }).then(() => console.log('MongoDB Connected..'))

// mongoose 6버전 이상 (mongoose 6버전 이상에선 더이상 useNewUrlParser, useUnifiedTopology, useFindAndModify, useCreateIndex 요 친구들을 지원하지 않음)
mongoose.connect(config.mongoURI)
.then(() => console.log('MongoDB Connected..'))
.catch(err => console.log(err))

app.get('/', (req, res) => res.send('Hello World!~~ 안녕하세요~'))	// root 디렉토리에 오면 Hello World를 출력 되게끔 해준다!

app.post('/register', async (req, res) => {
    // 회원가입 할 때 필요한 정보들을 client에서 가져오면
    // 그것들을 데이터 베이스에 넣어준다.

    // User 인스턴스 생성
    const user = new User(req.body)

    const result = await user.save().then(()=> {
        res.status(200).json({
            success: true
        })
    }).catch((err) => {
        res.json({ success : false, err})
    })

    // // 몽고DB에서 오는 메서드
    // user.save((err, doc) => {
    //     if(err) {
    //         return res.json({ success : false, err})
    //     }
    //     else {
    //         return res.status(200).json({
    //             success: true
    //         })
    //     }
    // })
})

app.listen(port, () => console.log(`Example app listening on port ${port}!`))	// 5000번 포트에서 해당 앱을 실행하게끔 해주는 것이다!